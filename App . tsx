import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select } from "@/components/ui/select";
import { ArrowLeft, Plus, Heart, Users, Download, User, Package, Shield, FileText, AlertTriangle, Search } from "lucide-react";

// Types
interface Item {
  id: number;
  name: string;
  description: string;
  condition: string;
  category: string;
  datePosted: string;
  poster: string;
}

interface UserType {
  id: number;
  name: string;
  email: string;
  phone: string;
  location: string;
}

// Sample data
const sampleItems: Item[] = [
  { id: 1, name: "Old Chair", description: "Wooden chair still usable", condition: "Good", category: "Furniture", datePosted: "2025-08-01", poster: "Alice" },
  { id: 2, name: "Laptop Bag", description: "Black laptop bag", condition: "Fair", category: "Accessories", datePosted: "2025-08-02", poster: "Bob" },
];

export default function UUApp() {
  const [view, setView] = useState("list");
  const [items, setItems] = useState<Item[]>(sampleItems);
  const [selectedItem, setSelectedItem] = useState<Item | null>(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [users, setUsers] = useState<UserType[]>([]);

  // Filtered items
  const filteredItems = items.filter(
    (item) =>
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.condition.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.poster.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Forms
  const PostForm = () => {
    const [name, setName] = useState("");
    const [description, setDescription] = useState("");
    const [condition, setCondition] = useState("Good");
    const [category, setCategory] = useState("General");
    const [poster, setPoster] = useState("");

    const handleSubmit = (e: React.FormEvent) => {
      e.preventDefault();
      if (!poster) {
        alert("You must register before posting items.");
        return;
      }
      const newItem: Item = {
        id: items.length + 1,
        name,
        description,
        condition,
        category,
        datePosted: new Date().toISOString().split("T")[0],
        poster,
      };
      setItems([...items, newItem]);
      setView("list");
    };

    return (
      <Card className="max-w-md mx-auto mt-4">
        <CardHeader>
          <CardTitle>Post an Item (Free Only)</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-3">
            <div>
              <Label>Name</Label>
              <Input value={name} onChange={(e) => setName(e.target.value)} required />
            </div>
            <div>
              <Label>Description</Label>
              <Textarea value={description} onChange={(e) => setDescription(e.target.value)} required />
            </div>
            <div>
              <Label>Condition</Label>
              <Input value={condition} onChange={(e) => setCondition(e.target.value)} />
            </div>
            <div>
              <Label>Category</Label>
              <Input value={category} onChange={(e) => setCategory(e.target.value)} />
            </div>
            <div>
              <Label>Your Name (Registered User)</Label>
              <Input value={poster} onChange={(e) => setPoster(e.target.value)} required />
            </div>
            <AlertTriangle className="text-red-600 inline mr-2" /> Selling is strictly prohibited.
            <Button type="submit" className="w-full">Post Item</Button>
          </form>
        </CardContent>
      </Card>
    );
  };

  const RegisterForm = () => {
    const [name, setName] = useState("");
    const [email, setEmail] = useState("");
    const [phone, setPhone] = useState("");
    const [location, setLocation] = useState("");

    const handleSubmit = (e: React.FormEvent) => {
      e.preventDefault();
      const newUser: UserType = { id: users.length + 1, name, email, phone, location };
      setUsers([...users, newUser]);
      setView("list");
    };

    return (
      <Card className="max-w-md mx-auto mt-4">
        <CardHeader>
          <CardTitle>User Registration</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-3">
            <div>
              <Label>Name</Label>
              <Input value={name} onChange={(e) => setName(e.target.value)} required />
            </div>
            <div>
              <Label>Email</Label>
              <Input type="email" value={email} onChange={(e) => setEmail(e.target.value)} required />
            </div>
            <div>
              <Label>Phone</Label>
              <Input value={phone} onChange={(e) => setPhone(e.target.value)} />
            </div>
            <div>
              <Label>Location</Label>
              <Input value={location} onChange={(e) => setLocation(e.target.value)} />
            </div>
            <Button type="submit" className="w-full">Register</Button>
          </form>
        </CardContent>
      </Card>
    );
  };

  // Views
  const ItemList = () => (
    <div className="p-4">
      <div className="flex items-center gap-2 mb-4">
        <Search className="w-5 h-5" />
        <Input placeholder="Search items..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
      </div>
      <div className="grid md:grid-cols-2 gap-4">
        {filteredItems.map((item) => (
          <Card key={item.id} onClick={() => { setSelectedItem(item); setView("details"); }} className="cursor-pointer">
            <CardHeader>
              <CardTitle>{item.name}</CardTitle>
            </CardHeader>
            <CardContent>
              <p>{item.description}</p>
              <p className="text-sm text-gray-500">Category: {item.category} | Condition: {item.condition}</p>
              <p className="text-sm">Posted by {item.poster} on {item.datePosted}</p>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );

  const ItemDetails = () => selectedItem && (
    <div className="p-4">
      <Button variant="outline" onClick={() => setView("list")}><ArrowLeft className="mr-2" /> Back</Button>
      <Card className="mt-4">
        <CardHeader>
          <CardTitle>{selectedItem.name}</CardTitle>
        </CardHeader>
        <CardContent>
          <p>{selectedItem.description}</p>
          <p className="text-sm">Condition: {selectedItem.condition}</p>
          <p className="text-sm">Category: {selectedItem.category}</p>
          <p className="text-sm">Posted by {selectedItem.poster} on {selectedItem.datePosted}</p>
        </CardContent>
      </Card>
    </div>
  );

  const DownloadPage = () => (
    <div className="p-4 max-w-xl mx-auto text-center">
      <Download className="w-10 h-10 mx-auto" />
      <h2 className="text-xl font-bold">Download UU App</h2>
      <p className="mt-2">Coming soon for Android & iOS</p>
    </div>
  );

  const TermsPage = () => (
    <div className="p-4 max-w-2xl mx-auto">
      <Shield className="inline mr-2" /> <h2 className="text-xl font-bold inline">Terms of Service</h2>
      <p className="mt-2">All items must be given for free. Selling is strictly prohibited. Violations may result in suspension.</p>
    </div>
  );

  const PrivacyPage = () => (
    <div className="p-4 max-w-2xl mx-auto">
      <FileText className="inline mr-2" /> <h2 className="text-xl font-bold inline">Privacy Policy</h2>
      <p className="mt-2">We respect your privacy. Your information is used only for community item sharing purposes.</p>
    </div>
  );

  return (
    <div className="flex flex-col min-h-screen">
      {/* Header */}
      <header className="bg-blue-600 text-white p-4 flex justify-between items-center">
        <h1 className="text-xl font-bold flex items-center gap-2"><Package /> UU (Use the Unused)</h1>
        <nav className="flex gap-4 text-sm">
          <button onClick={() => setView("list")}>Items</button>
          <button onClick={() => setView("post")}>Post</button>
          <button onClick={() => setView("register")}>Register</button>
          <button onClick={() => setView("download")}>Download</button>
          <button onClick={() => setView("terms")}>Terms</button>
          <button onClick={() => setView("privacy")}>Privacy</button>
        </nav>
      </header>

      {/* Main content */}
      <main className="flex-1 bg-gray-50">
        {view === "list" && <ItemList />}
        {view === "details" && <ItemDetails />}
        {view === "post" && <PostForm />}
        {view === "register" && <RegisterForm />}
        {view === "download" && <DownloadPage />}
        {view === "terms" && <TermsPage />}
        {view === "privacy" && <PrivacyPage />}
      </main>

      {/* Footer */}
      <footer className="bg-gray-800 text-white text-center p-4 text-sm">
        Â© {new Date().getFullYear()} UU (Use the Unused). All rights reserved.
      </footer>
    </div>
  );
}
